Index: app/src/main/res/values/styles.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><resources xmlns:tools=\"http://schemas.android.com/tools\">\n\n    <!-- Base application theme. -->\n    <style name=\"AppTheme\" parent=\"Theme.MaterialComponents.Light.DarkActionBar.Bridge\">\n        <!-- Customize your theme here. -->\n        <item name=\"colorPrimary\">#ccffffff</item>\n        <item name=\"colorPrimaryDark\">@color/colorPrimaryDark</item>\n        <item name=\"colorAccent\">@color/colorAccent</item>\n    </style>\n\n    <style name=\"LightTheme\" parent=\"Theme.MaterialComponents.Light.DarkActionBar.Bridge\">\n        <!-- Customize your theme here. -->\n        <item name=\"colorPrimary\">#ccffffff</item>\n        <item name=\"colorPrimaryDark\">@color/colorPrimaryDark</item>\n        <item name=\"colorAccent\">@color/colorAccent</item>\n    </style>\n\n\n    <style name=\"BlackTheme\" parent=\"Theme.MaterialComponents.Light.DarkActionBar.Bridge\">\n        <!-- Customize your theme here. -->\n        <item name=\"colorPrimary\">#000000</item>\n        <item name=\"colorPrimaryDark\">@color/colorPrimaryDark</item>\n        <item name=\"colorAccent\">@color/colorAccent</item>\n    </style>\n\n    <style name=\"TranslucentGreen\" parent=\"android:Theme.Translucent\">\n        <item name=\"android:windowBackground\">#45000000</item>\n    </style>\n\n    <style name=\"DialogStyle\" parent=\"Theme.Design.Light.BottomSheetDialog\">\n        <item name=\"android:windowIsFloating\">false</item>\n        <item name=\"android:dialogCornerRadius\" tools:targetApi=\"p\">30dp</item>\n        <item name=\"android:statusBarColor\">@android:color/transparent</item>\n        <item name=\"android:windowSoftInputMode\">adjustResize</item>\n    </style>\n<!--    <style name=\"DialogStyle\" parent=\"Theme.Design.Light.BottomSheetDialog\">-->\n<!--        <item name=\"android:windowIsFloating\">false</item>-->\n<!--        <item name=\"android:statusBarColor\">@android:color/transparent</item>-->\n<!--        <item name=\"android:windowSoftInputMode\">adjustResize</item>-->\n<!--    </style>-->\n</resources>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/values/styles.xml b/app/src/main/res/values/styles.xml
--- a/app/src/main/res/values/styles.xml	(revision 2eb01472d82834bef9c43981e58039332c1b37c0)
+++ b/app/src/main/res/values/styles.xml	(date 1681044748447)
@@ -33,7 +33,16 @@
         <item name="android:statusBarColor">@android:color/transparent</item>
         <item name="android:windowSoftInputMode">adjustResize</item>
     </style>
-<!--    <style name="DialogStyle" parent="Theme.Design.Light.BottomSheetDialog">-->
+
+
+    <style name="CustomBottomSheetDialogTheme" parent="Theme.Design.Light.BottomSheetDialog">
+        <item name="bottomSheetStyle">@style/CustomBottomSheetStyle</item>
+    </style>
+
+    <style name="CustomBottomSheetStyle" parent="Widget.Design.BottomSheet.Modal">
+        <item name="android:background">@android:color/transparent</item>
+    </style>
+    <!--    <style name="DialogStyle" parent="Theme.Design.Light.BottomSheetDialog">-->
 <!--        <item name="android:windowIsFloating">false</item>-->
 <!--        <item name="android:statusBarColor">@android:color/transparent</item>-->
 <!--        <item name="android:windowSoftInputMode">adjustResize</item>-->
Index: tapuilibrary/src/main/java/company/tap/tapuilibrary/uikit/views/TapBrandView.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package company.tap.tapuilibrary.uikit.views\n\nimport android.content.Context\nimport android.graphics.Color\nimport android.graphics.Typeface\nimport android.util.AttributeSet\nimport android.widget.ImageView\nimport android.widget.LinearLayout\nimport androidx.annotation.DrawableRes\nimport androidx.appcompat.widget.AppCompatImageView\nimport androidx.constraintlayout.widget.ConstraintLayout\nimport company.tap.tapuilibrary.R\nimport company.tap.tapuilibrary.fontskit.enums.TapFont\nimport company.tap.tapuilibrary.themekit.ThemeManager\nimport company.tap.tapuilibrary.themekit.theme.TextViewTheme\nimport company.tap.tapuilibrary.uikit.atoms.TapImageView\nimport company.tap.tapuilibrary.uikit.atoms.TapTextView\n\n\nclass TapBrandView : LinearLayout {\n\n    val poweredByImage by lazy { findViewById<AppCompatImageView>(R.id.poweredByImage) }\n\n    val outerConstraint by lazy { findViewById<ConstraintLayout>(R.id.outerConstraint) }\n    @DrawableRes\n    val logoIcon: Int =\n        if (ThemeManager.currentTheme.isNotEmpty() && ThemeManager.currentTheme.contains(\"dark\")){\n            R.drawable.poweredbytap2\n        } else if (ThemeManager.currentTheme.isNotEmpty() && ThemeManager.currentTheme.contains(\"light\")) {\n            R.drawable.poweredbytap2\n        }else R.drawable.poweredbytap2\n\n\n\n    /**\n     * Simple constructor to use when creating a TapHeader from code.\n     *  @param con] ext The Context the view is running in, through which it can\n     *  access the current theme, resources, etc.\n     **/\n    constructor(context: Context) : super(context)\n\n    /**\n     *  @param context The Context the view is running in, through which it can\n     *  access the current theme, resources, etc.\n     *  @param attrs The attributes of the XML Button tag being used to inflate the view.\n     *\n     */\n    constructor(context: Context, attrs: AttributeSet?) : super(context, attrs)\n\n    /**\n     *  @param context The Context the view is running in, through which it can\n     *  access the current theme, resources, etc.\n     *  @param attrs The attributes of the XML Button tag being used to inflate the view.\n     * @param defStyleAttr The resource identifier of an attribute in the current theme\n     * whose value is the the resource id of a style. The specified styleâ€™s\n     * attribute values serve as default values for the button. Set this parameter\n     * to 0 to avoid use of default values.\n     */\n    constructor(context: Context, attrs: AttributeSet?, defStyleAttr: Int) : super(\n        context,\n        attrs,\n        defStyleAttr\n    )\n\n    init {\n        inflate(context, R.layout.tap_brandview, this)\n        poweredByImage.setImageResource(logoIcon)\n\n      //  if (context?.let { LocalizationManager.getLocale(it).language } == \"en\") setFontsEnglish() else setFontsArabic()\n    }\n\n\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tapuilibrary/src/main/java/company/tap/tapuilibrary/uikit/views/TapBrandView.kt b/tapuilibrary/src/main/java/company/tap/tapuilibrary/uikit/views/TapBrandView.kt
--- a/tapuilibrary/src/main/java/company/tap/tapuilibrary/uikit/views/TapBrandView.kt	(revision 2eb01472d82834bef9c43981e58039332c1b37c0)
+++ b/tapuilibrary/src/main/java/company/tap/tapuilibrary/uikit/views/TapBrandView.kt	(date 1681045798865)
@@ -1,37 +1,42 @@
 package company.tap.tapuilibrary.uikit.views
 
 import android.content.Context
-import android.graphics.Color
-import android.graphics.Typeface
+import android.graphics.*
+import android.graphics.drawable.BitmapDrawable
 import android.util.AttributeSet
 import android.widget.ImageView
 import android.widget.LinearLayout
 import androidx.annotation.DrawableRes
 import androidx.appcompat.widget.AppCompatImageView
 import androidx.constraintlayout.widget.ConstraintLayout
+import androidx.core.content.ContextCompat
+import com.bumptech.glide.Glide
+import com.bumptech.glide.request.RequestOptions
+import com.github.twocoffeesoneteam.glidetovectoryou.GlideOptions.bitmapTransform
 import company.tap.tapuilibrary.R
 import company.tap.tapuilibrary.fontskit.enums.TapFont
 import company.tap.tapuilibrary.themekit.ThemeManager
-import company.tap.tapuilibrary.themekit.theme.TextViewTheme
-import company.tap.tapuilibrary.uikit.atoms.TapImageView
-import company.tap.tapuilibrary.uikit.atoms.TapTextView
+import company.tap.tapuilibrary.uikit.utils.BlurBuilder
+import jp.wasabeef.blurry.Blurry
+import jp.wasabeef.glide.transformations.BlurTransformation
 
 
 class TapBrandView : LinearLayout {
 
     val poweredByImage by lazy { findViewById<AppCompatImageView>(R.id.poweredByImage) }
+    val backgroundHeader by lazy { findViewById<AppCompatImageView>(R.id.img_background) }
 
     val outerConstraint by lazy { findViewById<ConstraintLayout>(R.id.outerConstraint) }
+
     @DrawableRes
     val logoIcon: Int =
-        if (ThemeManager.currentTheme.isNotEmpty() && ThemeManager.currentTheme.contains("dark")){
+        if (ThemeManager.currentTheme.isNotEmpty() && ThemeManager.currentTheme.contains("dark")) {
             R.drawable.poweredbytap2
         } else if (ThemeManager.currentTheme.isNotEmpty() && ThemeManager.currentTheme.contains("light")) {
             R.drawable.poweredbytap2
-        }else R.drawable.poweredbytap2
+        } else R.drawable.poweredbytap2
 
 
-
     /**
      * Simple constructor to use when creating a TapHeader from code.
      *  @param con] ext The Context the view is running in, through which it can
@@ -66,9 +71,17 @@
         inflate(context, R.layout.tap_brandview, this)
         poweredByImage.setImageResource(logoIcon)
 
-      //  if (context?.let { LocalizationManager.getLocale(it).language } == "en") setFontsEnglish() else setFontsArabic()
+
+        val originalBitmap: Bitmap = BitmapFactory.decodeResource(resources, R.drawable.backgr)
+        Blurry.with(context)
+            .radius(5) // make it more if you want the lue to be more
+            .sampling(2)
+            .color(Color.argb(155, 0, 0, 0))
+            .from(originalBitmap).into(backgroundHeader)
+
+
+        //  if (context?.let { LocalizationManager.getLocale(it).language } == "en") setFontsEnglish() else setFontsArabic()
     }
 
 
-
 }
\ No newline at end of file
Index: tapuilibrary/src/main/res/layout/tap_brandview.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"48dp\"\n    android:id=\"@+id/outerConstraint\"\n    android:layoutDirection=\"locale\"\n   \n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:orientation=\"horizontal\">\n\n\n    <ImageView\n        android:id=\"@+id/poweredByImage\"\n        android:layout_width=\"112dp\"\n        android:layout_height=\"@dimen/margin_basic_20dp\"\n        app:layout_constraintTop_toTopOf=\"parent\"\n        android:layout_marginBottom=\"9dp\"\n        android:layout_marginTop=\"9dp\"\n        android:src=\"@drawable/poweredbytap2\"\n        android:layout_marginEnd=\"15dp\"\n        android:layoutDirection=\"locale\"\n        android:layout_marginStart=\"@dimen/margin_basic_15dp\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\" />\n\n</androidx.constraintlayout.widget.ConstraintLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tapuilibrary/src/main/res/layout/tap_brandview.xml b/tapuilibrary/src/main/res/layout/tap_brandview.xml
--- a/tapuilibrary/src/main/res/layout/tap_brandview.xml	(revision 2eb01472d82834bef9c43981e58039332c1b37c0)
+++ b/tapuilibrary/src/main/res/layout/tap_brandview.xml	(date 1681045370066)
@@ -1,27 +1,41 @@
 <?xml version="1.0" encoding="utf-8"?>
 <androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
     xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:id="@+id/outerConstraint"
     android:layout_width="match_parent"
     android:layout_height="48dp"
-    android:id="@+id/outerConstraint"
     android:layoutDirection="locale"
-   
-    xmlns:tools="http://schemas.android.com/tools"
     android:orientation="horizontal">
 
+    <FrameLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent">
+
+        <ImageView
+            android:id="@+id/img_background"
+            android:layout_width="match_parent"
+            android:scaleType="centerCrop"
+            android:layout_height="match_parent" />
+    </FrameLayout>
+
 
     <ImageView
         android:id="@+id/poweredByImage"
         android:layout_width="112dp"
         android:layout_height="@dimen/margin_basic_20dp"
-        app:layout_constraintTop_toTopOf="parent"
-        android:layout_marginBottom="9dp"
+        android:layout_marginStart="@dimen/margin_basic_15dp"
         android:layout_marginTop="9dp"
-        android:src="@drawable/poweredbytap2"
         android:layout_marginEnd="15dp"
+        android:layout_marginBottom="9dp"
         android:layoutDirection="locale"
-        android:layout_marginStart="@dimen/margin_basic_15dp"
+        android:src="@drawable/poweredbytap2"
         app:layout_constraintBottom_toBottomOf="parent"
-        app:layout_constraintEnd_toEndOf="parent" />
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintTop_toTopOf="parent" />
 
 </androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
Index: app/src/main/java/company/tap/tapuisample/fragments/BottomSheetDialog.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package company.tap.tapuisample.fragments\n\n\nimport android.annotation.SuppressLint\nimport android.content.Context\nimport android.graphics.BitmapFactory\nimport android.graphics.Color\nimport android.graphics.drawable.BitmapDrawable\nimport android.graphics.drawable.Drawable\nimport android.graphics.drawable.ShapeDrawable\nimport android.os.Build\nimport android.os.Bundle\nimport android.os.CountDownTimer\nimport android.os.Handler\nimport android.text.Editable\nimport android.text.TextWatcher\nimport android.util.Log\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.view.WindowManager\nimport android.widget.*\nimport androidx.annotation.Nullable\nimport androidx.annotation.RequiresApi\nimport androidx.cardview.widget.CardView\nimport androidx.fragment.app.DialogFragment\nimport androidx.recyclerview.widget.DividerItemDecoration\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport androidx.recyclerview.widget.RecyclerView\nimport androidx.transition.TransitionManager\nimport com.google.android.material.bottomsheet.BottomSheetBehavior.STATE_EXPANDED\nimport company.tap.cardinputwidget.CardBrandSingle\nimport company.tap.cardinputwidget.widget.inline.InlineCardInput\nimport company.tap.tapcardvalidator_android.CardBrand\nimport company.tap.tapcardvalidator_android.CardValidationState\nimport company.tap.tapcardvalidator_android.CardValidator\nimport company.tap.taplocalizationkit.LocalizationManager\nimport company.tap.tapuilibrary.fontskit.FontChanger\nimport company.tap.tapuilibrary.fontskit.enums.TapFont\nimport company.tap.tapuilibrary.fontskit.enums.TapFont.Companion.tapFontType\nimport company.tap.tapuilibrary.themekit.ThemeManager\nimport company.tap.tapuilibrary.themekit.theme.EditTextTheme\nimport company.tap.tapuilibrary.themekit.theme.SeparatorViewTheme\nimport company.tap.tapuilibrary.uikit.animation.AnimationEngine\nimport company.tap.tapuilibrary.uikit.atoms.*\nimport company.tap.tapuilibrary.uikit.datasource.*\nimport company.tap.tapuilibrary.uikit.enums.ActionButtonState\nimport company.tap.tapuilibrary.uikit.enums.GoPayLoginMethod\nimport company.tap.tapuilibrary.uikit.fragment.CardScannerFragment\nimport company.tap.tapuilibrary.uikit.fragment.NFCFragment\nimport company.tap.tapuilibrary.uikit.interfaces.*\nimport company.tap.tapuilibrary.uikit.ktx.setBorderedView\nimport company.tap.tapuilibrary.uikit.ktx.setBottomBorders\nimport company.tap.tapuilibrary.uikit.ktx.setTopBorders\nimport company.tap.tapuilibrary.uikit.models.SectionTabItem\nimport company.tap.tapuilibrary.uikit.organisms.GoPayLoginInput\nimport company.tap.tapuilibrary.uikit.organisms.GoPayPasswordInput\nimport company.tap.tapuilibrary.uikit.organisms.OTPView\nimport company.tap.tapuilibrary.uikit.organisms.TapPaymentInput\nimport company.tap.tapuilibrary.uikit.views.*\nimport company.tap.tapuisample.*\nimport company.tap.tapuisample.MainSwitch\nimport company.tap.tapuisample.TabAnimatedActionButton\nimport company.tap.tapuisample.TapCardSwitch\nimport company.tap.tapuisample.TapHeaderSectionView\nimport company.tap.tapuisample.adapters.CardTypeAdapter\nimport company.tap.tapuisample.interfaces.OnCardSelectedActionListener\nimport company.tap.tapuisample.webview.WebFragment\nimport company.tap.tapuisample.webview.WebViewContract\nimport kotlinx.android.synthetic.main.custom_bottom_sheet.*\nimport kotlinx.android.synthetic.main.custom_bottom_sheet.switch_pay_demo\nimport kotlinx.android.synthetic.main.item_knet.view.*\nimport kotlinx.android.synthetic.main.tap_main_header.view.*\n\n/**\nCopyright (c) 2020    Tap Payments.\nAll rights reserved.\n **/\nopen class BottomSheetDialog : TapBottomSheetDialog(),\n    TapSelectionTabLayoutInterface, GoPayLoginInterface, OpenOTPInterface,\n    OnCardSelectedActionListener, TapActionButtonInterface, TapPaymentShowHideClearImage,\n    WebViewContract, OtpButtonConfirmationInterface {\n\n    private lateinit var selectedCurrency: TapTextView\n    private lateinit var currentCurrency: TapTextView\n    private lateinit var itemCount: TapButton\n    private var tapAmountSectionInterface: TapAmountSectionInterface? = null\n    private lateinit var chipRecycler: RecyclerView\n    private val paymentsList: ArrayList<Int> = arrayListOf(1, 2, 3, 4, 5, 6)\n    private var isFragmentAdded = false\n    private var businessName: String? = null\n    private var paymentFor: String? = null\n    private var businessInitial: String? = null\n    private lateinit var tapHeaderSectionView: TapHeaderSectionView\n    private lateinit var amountSectionView: TapAmountSectionView\n    private lateinit var businessIcon: TapImageView\n    private lateinit var tapCloseIcon: TapImageView\n    private lateinit var businessPlaceholder: TapTextView\n    var fontChanger: FontChanger? = null\n    private var selectedTab = 0\n\n    private lateinit var tabLayout: company.tap.tapuilibrary.uikit.views.TapSelectionTabLayout\n    private lateinit var tapCardInputView: InlineCardInput\n    private lateinit var tapMobileInputView: TapMobilePaymentView\n\n    private lateinit var paymentLayout: LinearLayout\n    private lateinit var nfcScanBtn: TapButton\n    private lateinit var switchDemo: TapInlineCardSwitch\n    private lateinit var mainSwitch: MainSwitch\n    private lateinit var payButton:  company.tap.tapuilibrary.uikit.views.TabAnimatedActionButton\n    private var switch_save_mobile: TapSwitch? = null\n    private var switchSaveDemo: TapSwitch? = null\n    private var switchLayout: LinearLayout? = null\n    private var switchMerchantCheckout: TapSwitch? = null\n    private var switchgoPayCheckout: TapSwitch? = null\n    private var savegoPay: TapTextView? = null\n    private var alertgoPay: TapTextView? = null\n    private var saveCardorMobile: TapTextView? = null\n    private var separatorView: TapSeparatorView? = null\n    private var checkboxString: String? = null\n    private var mainChipGroup: TapChipGroup? = null\n    private var groupName: TapTextView? = null\n    private var groupAction: TapTextView? = null\n    private var cardScannerBtn: ImageView? = null\n    private var nfcButton: ImageView? = null\n    private var mobileNumberEditText: EditText? = null\n    private var alertMessage: TapTextView? = null\n    private var clearView: ImageView? = null\n    private var linearLayoutPay: RelativeLayout? = null\n    private var tapSeparatorViewLinear: LinearLayout? = null\n    private val cardFragment = CardScannerFragment()\n    private val nfcFragment = NFCFragment()\n    private var cardFragmentadded: Boolean = false\n    private var delImageView1: ImageView? = null\n    private var delImageView2: ImageView? = null\n    private var delImageView3: ImageView? = null\n    private var tapChipgrp: TapChip? = null\n    private var tapCardChip2: TapChip? = null\n    private var goPayPasswordInput: GoPayPasswordInput? = null\n    private var goPayLoginInput: GoPayLoginInput? = null\n    private var otpButtonConfirmationInterface: OtpButtonConfirmationInterface? = null\n    private var otpView: OTPView? = null\n    private var acceptedCardText: TapTextView? = null\n    private var mainLinear: LinearLayout? = null\n    private var contactDetailView: TapContactDetailsView? = null\n    private var shippingDetailView: TapShippingDetailView? = null\n    private var mobileMainLinear: LinearLayout? = null\n    lateinit var cardInputCardView: LinearLayout\n    lateinit var tapPaymentInput: TapPaymentInput\n    lateinit var saveForLaterCheckBox: CheckBox\n\n\n    override fun onCreateView(\n        inflater: LayoutInflater,\n        container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        val view: View = inflater.inflate(R.layout.custom_bottom_sheet, container, false)\n        bottomSheetDialog.behavior.state = STATE_EXPANDED\n        otpView = view.findViewById(R.id.otpView)\n        otpView?.setOTPInterface(this)\n        otpView?.setOtpButtonConfirmationInterface(this)\n        initGoPay(view)\n        activity?.window?.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);\n        return view.rootView\n    }\n\n    fun initGoPay(view: View) {\n        goPayLoginInput = view.findViewById(R.id.goPayLoginInput)\n        goPayPasswordInput = view.findViewById(R.id.goPayPassword)\n        goPayLoginInput?.changeDataSource(GoPayLoginDataSource())\n        goPayLoginInput?.setLoginInterface(this)\n        goPayLoginInput?.setOpenOTPInterface(this)\n        goPayPasswordInput?.setLoginInterface(this, goPayLoginInput?.textInput?.text.toString())\n    }\n\n    override fun onAttach(context: Context) {\n        super.onAttach(context)\n        try {\n            tapAmountSectionInterface = context as TapAmountSectionInterface\n        } catch (ex: ClassCastException) {\n            try {\n                tapAmountSectionInterface = parentFragment as TapAmountSectionInterface\n            } catch (ignore: Exception) {\n            }\n        }\n       // dialog?.window?.attributes?.windowAnimations = R.anim.slide_up\n    }\n\n    override fun onViewCreated(view: View, @Nullable savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        switch_pay_demo.payButton.setButtonDataSource(\n            false, context?.let { LocalizationManager.getLocale(it).language },\n            LocalizationManager.getValue(\"pay\", \"ActionButton\"),\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\"))\n        )\n\n\n        //switch_pay_demo.brandingLayout.visibility =View.VISIBLE\n        /**\n         * Calling this class for adjust view up when keyboard is opened\n         */\n        activity?.let { KeyboardUtil(it, view) }\n\n\n        setStyle(DialogFragment.STYLE_NORMAL, R.style.DialogStyle)\n        bottomSheetLayout = bottomSheetDialog.findViewById(R.id.design_bottom_sheet)\n        bottomSheetLayout?.setBackgroundColor(Color.MAGENTA)\n        /**\n         * set separator background\n         */\n        topSeparatorLinear.setBackgroundColor((Color.parseColor(ThemeManager.getValue(\"merchantHeaderView.backgroundColor\"))))\n\n\n        switch_pay_demo.payButton.stateListAnimator = null\n        switch_pay_demo.payButton.isActivated = false\n        tapChipgrp = view.findViewById(R.id.tapcard_Chip)\n        tapCardChip2 = view.findViewById(R.id.tapCardChip2)\n        setAllSeparatorTheme()\n//        setTapMobileInputViewTheme()\n//        dialog?.getWindow()?.setBackgroundDrawable( ColorDrawable(Color.TRANSPARENT));\n//        mainView.clipToOutline = true\n//        outer_layout.setBackgroundColor(Color.parseColor(ThemeManager.getValue(\"TapSwitchView.backgroundColor\")))\n\n        /**\n         * set bottom sheet background\n         */\n     //   backgroundColor =\n     //       (Color.parseColor(ThemeManager.getValue(\"GlobalValues.Colors.main_switch_background\")))\n      //  backgroundColor = (Color.parseColor(\"#00000000\"))\n        setTopBorders(\n            topLinear,\n            40f,// corner raduis\n            0.0f,\n            Color.parseColor(ThemeManager.getValue(\"merchantHeaderView.backgroundColor\")),// stroke color\n            Color.parseColor(ThemeManager.getValue(\"merchantHeaderView.backgroundColor\")),// tint color\n            Color.parseColor(ThemeManager.getValue(\"merchantHeaderView.backgroundColor\"))\n        )//\n        val borderColor:String = ThemeManager.getValue<String>(\"poweredByTap.backgroundColor\").toString()\n        var borderOpacityVal: String? = null\n        //Workaround since we don't have direct method for extraction\n        borderOpacityVal = borderColor.substring(borderColor.length - 2)\n        /* setTopBorders(\n             topLinear2.outerConstraint,\n            40f,// corner raduis\n            0.0f,\n             Color.parseColor(\"#\"+borderOpacityVal+borderColor.substring(0, borderColor.length -2).replace(\"#\",\"\")),\n             Color.parseColor(\"#\"+borderOpacityVal+borderColor.substring(0, borderColor.length -2).replace(\"#\",\"\")),// tint color\n             Color.parseColor(\"#\"+borderOpacityVal+borderColor.substring(0, borderColor.length -2).replace(\"#\",\"\"))\n        )//\n*/\n\n\n        BlurBuilder.blur(topLinear2)\n        separatorÙ€Ù€Layout.setBackgroundColor(Color.parseColor(ThemeManager.getValue(\"TapSwitchView.main.backgroundColor\")))\n        initializeViews(view)\n\n\n        switch_pay_demo.payButton.setOnClickListener {\n            if (switch_pay_demo.payButton.isActivated) {\n                changeBottomSheetTransition()\n\n                /**\n                 * check if there is saving options or not if not we will set visibility for switches layout in TapCardSwitch Gone\n                 * if user want to check main switch\n                 */\n//                switch_pay_demo.showOnlyPayButton()\n//                mainSwitchUncheckedAction()\n//                switch_pay_demo.payButton.changeButtonState(ActionButtonState.LOADING)\n//                switch_pay_demo.payButton.addChildView(\n//                    switch_pay_demo.payButton.getImageView(\n//                        R.drawable.loader,\n//                        1\n//                    ) {  })\n\n                if (paymentsList[2] == 3) {\n                    goPayLoginInput?.visibility = View.VISIBLE\n//                    goPayPasswordInput?.visibility = View.VISIBLE\n                    mainChipgroup?.visibility = View.GONE\n                    tapSeparatorViewLinear?.visibility = View.GONE\n                    separatorÙ€Ù€Layout?.visibility = View.GONE\n                    hideAllViews()\n                    tapHeaderSectionView.visibility = View.VISIBLE\n                    amountSectionView.visibility = View.VISIBLE\n                    businessPlaceholder.visibility = View.VISIBLE\n                    topSeparator.visibility = View.VISIBLE\n                    separator.visibility = View.VISIBLE\n                    businessIcon.visibility = View.VISIBLE\n\n\n//                    Toast.makeText(context, \"goPay is clicked\", Toast.LENGTH_SHORT).show()\n//                    activity?.supportFragmentManager?.let { it1 ->\n//                        ExampleFragment()\n//                            .show(it1, null)\n//                    }\n//\n//\n//                    childFragmentManager\n//                        .beginTransaction()\n//                        .add(R.id.fragment_container_nfc, exampleFragment)\n//                        .commit()\n//                    cardFragmentadded = true\n//                    goPayLoginInput.visibility= View.VISIBLE\n//                    goPayPassword.visibility= View.VISIBLE\n//                        childFragmentManager\n//                            .beginTransaction()\n//                            .remove(WebFragment(this))\n//                            .commit()\n//                        dialog?.hide()\n//                    changeBottomSheetTransition()\n                }\n//                else\n\n\n\n            }\n        }\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    @SuppressLint(\"SetTextI18n\")\n    private fun initializeViews(view: View) {\n        OnCLick()\n        headerViewInit(view)\n        amountViewInit(view)\n        tabLayoutInit(view)\n        setupChip(view)\n        switchViewInit(view)\n        initializeCardForm(view)\n        addCardsTab()\n      //  addMobileTab() // commented for now 28sep22\n        setupBrandDetection()\n        configureSwitch()\n        initCustomerDetailView(view)\n    }\n\n    private fun initCustomerDetailView(view: View) {\n        contactDetailView = view.findViewById(R.id.contactDetailView)\n        shippingDetailView = view.findViewById(R.id.shipDetailView)\n        mobileMainLinear = contactDetailView?.findViewById(R.id.mobilePaymentMainLinear)\n        mobileMainLinear?.visibility = View.VISIBLE\n        shippingDetailView?.visibility = View.GONE\n\n       contactDetailView?.contactEmailET?.addTextChangedListener(object : TextWatcher {\n           override fun onTextChanged(s: CharSequence, start: Int, before: Int, count: Int) {\n           }\n           override fun afterTextChanged(arg0: Editable) {\n             if(arg0.contains(\"tap\")){\n                 contactDetailView?.mobileMainLinear?.visibility =View.VISIBLE\n             }\n           }\n           override fun beforeTextChanged(s: CharSequence, start: Int, count: Int, after: Int) {}\n       })\n\n        contactDetailView?.contactMobileNumber?.addTextChangedListener(object : TextWatcher {\n            override fun onTextChanged(s: CharSequence, start: Int, before: Int, count: Int) {\n            }\n            override fun afterTextChanged(arg0: Editable) {\n                if(arg0.contains(\"55567\")){\n                    shippingDetailView?.visibility =View.VISIBLE\n                }\n            }\n            override fun beforeTextChanged(s: CharSequence, start: Int, count: Int, after: Int) {}\n        })\n\n    }\n\n    private  fun OnCLick(){\n        otpView!!.timerText.setOnClickListener {\n\n            otpView!!.restartTimer()\n        }\n    }\n\n    private fun initializeCardForm(view: View) {\n        cardScannerBtn = view.findViewById(R.id.card_scanner_button)\n        nfcButton = view.findViewById(R.id.nfc_button)\n        mobileNumberEditText = view.findViewById(R.id.mobileNumber)\n        alertMessage = view.findViewById(R.id.textViewAlertMessage)\n        clearView = view.findViewById(R.id.clear_text)\n        linearLayoutPay = view.findViewById(R.id.linear_paylayout)\n        mainLinear = view.findViewById(R.id.mainLinear)\n        tapSeparatorViewLinear = view.findViewById(R.id.tapSeparatorViewLinear)\n        tapSeparatorViewLinear?.setBackgroundColor(Color.parseColor(ThemeManager.getValue(\"horizontalList.backgroundColor\")))\n        mainLinear?.setBackgroundColor(Color.parseColor(ThemeManager.getValue(\"horizontalList.backgroundColor\")))\n\n        tapCardInputView.clearFocus()\n        tapCardInputView.holderNameEnabled = true\n        clearView?.setOnClickListener {\n            tabLayout.resetBehaviour()\n            tapMobileInputView.clearNumber()\n            tapCardInputView.clear()\n            alert_text.visibility = View.GONE\n            clearView?.visibility = View.GONE\n            switchSaveDemo?.visibility = View.GONE\n            switchLayout?.visibility = View.GONE\n            switchMerchantCheckout?.visibility = View.GONE\n            switchgoPayCheckout?.visibility = View.GONE\n            savegoPay?.visibility = View.GONE\n            alertgoPay?.visibility = View.GONE\n            separatorView?.visibility = View.GONE\n            tabLayout.visibility = View.VISIBLE\n            tapCardInputView.holderNameEnabled = false\n        }\n        nfcButton?.setOnClickListener {\n            tabLayout?.visibility = View.GONE\n            paymentLayout.visibility = View.GONE\n            currentCurrency.visibility = View.GONE\n            mainChipGroup?.visibility = View.GONE\n            mainChipGroup?.visibility = View.GONE\n            tap_payment_input0.visibility = View.GONE\n            switchDemo.visibility = View.GONE\n            mainSwitch.visibility = View.GONE\n            separatorÙ€Ù€Layout.visibility = View.GONE\n            alert_text.visibility = View.GONE\n            separatorÙ€Ù€.visibility = View.GONE\n            tapSeparatorViewLinear?.visibility = View.GONE\n            switch_pay_demo.payButton.visibility = View.GONE\n            itemCount.text = \"CLOSE\"\n            childFragmentManager\n                .beginTransaction()\n                .add(R.id.fragment_container_nfc, nfcFragment)\n                .commit()\n            cardFragmentadded = true\n\n        }\n        cardScannerBtn?.setBackgroundColor(Color.parseColor(ThemeManager.getValue(\"inlineCard.commonAttributes.backgroundColor\")))\n        cardScannerBtn?.setOnClickListener {\n            bottomSheetDialog.behavior.isFitToContents = false\n             val cardFragment = CardScannerFragment()\n            tabLayout?.visibility = View.GONE\n            paymentLayout.visibility = View.GONE\n            currentCurrency.visibility = View.GONE\n            mainChipGroup?.visibility = View.GONE\n            // nfcScanBtn.visibility= View.GONE\n            cardSwitch.visibility = View.GONE\n            switch_pay_demo.visibility = View.GONE\n            mainChipGroup?.visibility = View.GONE\n            tap_payment_input0.visibility = View.GONE\n            switchDemo.visibility = View.GONE\n            mainSwitch.visibility = View.GONE\n            cardSwitch.visibility = View.GONE\n            switch_pay_demo.payButton.visibility = View.GONE\n//            outer_layout.visibility = View.GONE\n            itemCount.text = \"CLOSE\"\n\n            childFragmentManager\n                .beginTransaction()\n                .replace(R.id.fragment_container_nfc, cardFragment)\n                .commit()\n//            cardFragmentadded = true\n        }\n    }\n\n    private fun switchViewInit(view: View) {\n        switchDemo = view.findViewById(R.id.switch_pay_demo)\n       // switchDemo.brandingLayout.visibility =View.VISIBLE\n        switchDemo.tapLogoImage.visibility =View.VISIBLE\n        mainSwitch = view.findViewById(R.id.mainSwitch)\n        switchSaveDemo = mainSwitch.findViewById(R.id.switchSaveMobile)\n//        switch_save_mobile = switchDemo.findViewById(R.id.switch_save_mobile)\n        payButton = switchDemo.findViewById(R.id.payButton)\n        switchLayout = switchDemo.findViewById(R.id.switches_layout)\n        separatorView = switchDemo.findViewById(R.id.switch_separator)\n        switchMerchantCheckout = switchDemo.findViewById(R.id.switch_merchant_checkout)\n        switchgoPayCheckout = switchDemo.findViewById(R.id.switch_gopay_checkout)\n//        saveCardorMobile = switchDemo.findViewById(R.id.text_save)\n        savegoPay = switchDemo.findViewById(R.id.save_goPay)\n        alertgoPay = switchDemo.findViewById(R.id.alert_gopay_signup)\n        mainSwitch.mainSwitchLinear.setBackgroundColor(Color.parseColor(ThemeManager.getValue(\"TapSwitchView.main.backgroundColor\")))\n        cardSwitch.cardElevation = 0f\n\n\n//        card.setCardBackgroundColor(Color.parseColor(ThemeManager.getValue(\"TapSwitchView.main.backgroundColor\")))\n        mainSwitch.setSwitchDataSource(getSwitchDataSource(getString(R.string.mobile_text)))\n\n    }\n\n    //Setting data to TapSwitchDataSource\n    private fun getSwitchDataSource(switchText: String): TapSwitchDataSource {\n        return TapSwitchDataSource(\n            switchSave = switchText,\n            switchSaveMerchantCheckout = \"Save for Later\",\n            switchSavegoPayCheckout = \"By enabling goPay, your mobile number will be saved with Tap Payments to get faster and more secure checkouts in multiple apps and websites.\",\n            savegoPayText = \"Save for goPay Checkouts\",\n            alertgoPaySignup = \"Please check your email or SMSâ€™s in order to complete the goPay Checkout signup process.\"\n        )\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun tabLayoutInit(view: View) {\n        tabLayout = view.findViewById(R.id.sections_tablayout)\n        tabLayout.setTabLayoutInterface(this)\n        tabLayout.visibility = View.VISIBLE\n        tapMobileInputView = TapMobilePaymentView(context, null)\n        if (context != null) {\n            tapCardInputView = context?.let { InlineCardInput(it) }!!\n            println(\"mobile view $tapCardInputView\")\n        }\n        acceptedCardText= view.findViewById(R.id.acceptedCardText)\n        acceptedCardText?.setBackgroundColor(Color.parseColor(ThemeManager.getValue(\"horizontalList.backgroundColor\")))\n        bottomSheetDialog.behavior.state = STATE_EXPANDED\n        tapMobileInputView.setTapPaymentShowHideClearImage(this)\n        tabLayout.setBackgroundColor(Color.parseColor(ThemeManager.getValue(\"inlineCard.commonAttributes.backgroundColor\")))\n        tabLayout.changeTabItemMarginLeftValue(-30)\n        tabLayout.changeTabItemMarginBottomValue(30)\n\n        tabLayout.changeTabItemMarginRightValue(-30)\n    }\n\n    private fun setupFonts() {\n        if (context?.let { LocalizationManager.getLocale(it).language } == \"en\") {\n            fontChanger = FontChanger(\n                activity?.assets,\n                tapFontType(TapFont.RobotoMedium)\n            )\n            fontChanger!!.replaceFonts((activity?.findViewById(android.R.id.content) as ViewGroup?)!!)\n        } else {\n            fontChanger = FontChanger(\n                activity?.assets,\n                tapFontType(TapFont.TajawalMedium)\n            )\n            fontChanger!!.replaceFonts((activity?.findViewById(android.R.id.content) as ViewGroup?)!!)\n        }\n    }\n\n\n\n\n\n\n    @SuppressLint(\"ResourceAsColor\")\n    private fun setupChip(view: View) {\n        mainChipGroup = view.findViewById(R.id.mainChipgroup)\n        tapPaymentInput = view.findViewById(R.id.tap_payment_input0)\n\n\n        //cardInputCardView = tapPaymentInput.findViewById(R.id.inline_CardView)\n        mainChipgroup.orientation = LinearLayout.HORIZONTAL\n        groupName = view.findViewById<TapTextView>(R.id.group_name)\n        groupName?.text = LocalizationManager.getValue(\n            \"GatewayHeader\",\n            \"HorizontalHeaders\",\n            \"leftTitle\"\n        )\n        groupAction = view.findViewById<TapTextView>(R.id.group_action)\n        groupAction?.text = LocalizationManager.getValue(\n            \"GatewayHeader\",\n            \"HorizontalHeaders\",\n            \"rightTitle\"\n        )\n        chipRecycler = view.findViewById(R.id.chip_recycler)\n        chipRecycler.layoutManager = LinearLayoutManager(context, RecyclerView.HORIZONTAL, false)\n\n\n        /**\n         * Setting divider for items\n         */\n        val divider = DividerItemDecoration(\n            context,\n            DividerItemDecoration.HORIZONTAL\n        )\n        divider.setDrawable(ShapeDrawable().apply {\n            intrinsicWidth = 10\n            paint.color = Color.TRANSPARENT\n        }) // note: currently (support version 28.0.0), we can not use tranparent color here, if we use transparent, we still see a small divider line. So if we want to display transparent space, we can set color = background color or we can create a custom ItemDecoration instead of DividerItemDecoration.\n        chipRecycler.addItemDecoration(divider)\n\n\n\n        chipRecycler.adapter = CardTypeAdapter(paymentsList, this, false)\n\n        groupAction?.visibility = View.VISIBLE\n\n        groupAction?.setOnClickListener {\n            if (groupAction?.text == \"Close\") {\n                chipRecycler.adapter = CardTypeAdapter(paymentsList, this, false)\n                groupAction?.text = \"Edit\"\n\n            } else {\n                chipRecycler.adapter = CardTypeAdapter(paymentsList, this, true)\n                groupAction?.text = \"Close\"\n            }\n\n        }\n//        }\n\n       /* tapPaymentInput.cardInputChipView.setBackgroundResource(R.drawable.border_unclick)\n        setBorderedView(\n            tapPaymentInput.cardInputChipView,\n            //(ThemeManager.getValue(\"horizontalList.chips.radius\") as Int).toFloat(),// corner raduis\n            19.0f,// corner raduis\n            0.0f,\n            Color.parseColor(ThemeManager.getValue(\"horizontalList.chips.goPayChip.selected.shadow.color\")),// stroke color\n            Color.parseColor(ThemeManager.getValue(\"horizontalList.chips.gatewayChip.backgroundColor\")),// tint color\n            Color.parseColor(ThemeManager.getValue(\"horizontalList.chips.goPayChip.unSelected.shadow.color\"))\n        )// shadow color\n*/\n        tapPaymentInput.paymentInputContainer.setBackgroundResource(R.drawable.border_unclick)\n        setBorderedView(\n            tapPaymentInput.paymentInputContainer,\n            //(ThemeManager.getValue(\"horizontalList.chips.radius\") as Int).toFloat(),// corner raduis\n            19.0f,// corner raduis\n            0.0f,\n            Color.parseColor(ThemeManager.getValue(\"horizontalList.chips.goPayChip.selected.shadow.color\")),// stroke color\n            Color.parseColor(ThemeManager.getValue(\"horizontalList.chips.gatewayChip.backgroundColor\")),// tint color\n            Color.parseColor(ThemeManager.getValue(\"horizontalList.chips.goPayChip.unSelected.shadow.color\"))\n        )// shadow color\n\n         tapPaymentInput.tabLinear.setBackgroundResource(R.drawable.border_unclick)\n        setBorderedView(\n            tapPaymentInput.tabLinear,\n            //(ThemeManager.getValue(\"horizontalList.chips.radius\") as Int).toFloat(),// corner raduis\n            19.0f,// corner raduis\n            0.0f,\n            Color.parseColor(ThemeManager.getValue(\"horizontalList.chips.goPayChip.selected.shadow.color\")),// stroke color\n            Color.parseColor(ThemeManager.getValue(\"horizontalList.chips.gatewayChip.backgroundColor\")),// tint color\n            Color.parseColor(ThemeManager.getValue(\"horizontalList.chips.goPayChip.unSelected.shadow.color\"))\n        )// shadow color\n    }\n    private fun stopShakingCards(chipsView: RecyclerView) {\n        chipsView.adapter = CardTypeAdapter(paymentsList, this, false)\n    }\n\n\n    @SuppressLint(\"ResourceType\")\n    private fun headerViewInit(view: View) {\n        setupFonts()\n        tapHeaderSectionView = view.findViewById(R.id.headerView)\n        businessName =\n            if (context?.let { LocalizationManager.getLocale(it).language } == \"en\") getString(R.string.tap_payments)\n            else \"ØªØ§Ø¨\"\n        paymentFor = LocalizationManager.getValue(\"paymentFor\", \"TapMerchantSection\")\n        tapHeaderSectionView.setHeaderDataSource(getHeaderDataSource())\n        businessIcon = view.findViewById(R.id.businessIcon)\n        tapCloseIcon = view.findViewById(R.id.tapCloseIcon)\n        businessPlaceholder = view.findViewById(R.id.placeholderText)\n        tapCloseIcon.setBackgroundColor(Color.parseColor(ThemeManager.getValue(\"merchantHeaderView.cancelButton.backgroundColor\")))\n        tapCloseIcon.setOnClickListener {\n            this.dismiss()\n        }\n\n    }\n\n    private fun getHeaderDataSource(): HeaderDataSource {\n        return HeaderDataSource(\n            businessName = businessName,\n            businessFor = LocalizationManager.getValue(\"paymentFor\", \"TapMerchantSection\")\n        )\n    }\n\n\n    @SuppressLint(\"SetTextI18n\")\n    private fun amountViewInit(view: View) {\n        amountSectionView = view.findViewById(R.id.amount_section)\n        amountSectionView.setAmountViewDataSource(getAmountViewDataSOurce())\n        currentCurrency = view.findViewById(R.id.mainKDAmountValue)\n        selectedCurrency = view.findViewById(R.id.selectedAmountValue)\n        itemCount = view.findViewById(R.id.itemCountButton)\n\n        amountSectionView.itemAmountLayout.setOnClickListener {\n          //  bottomSheetLayout?.setBackgroundResource(R.drawable.corner_radius_top)\n          //  bottomSheetLayout?.setBackgroundColor(Color.parseColor(ThemeManager.getValue(\"merchantHeaderView.backgroundColor\")))\n            bottomSheetLayout?.setBackgroundColor(Color.RED)\n            bottomSheetLayout?.let { it1 ->\n                setTopBorders(\n                    it1,\n                    40f,// corner raduis\n                    0.0f,\n                    Color.parseColor(ThemeManager.getValue(\"merchantHeaderView.backgroundColor\")),// stroke color\n                    Color.parseColor(ThemeManager.getValue(\"merchantHeaderView.backgroundColor\")),// tint color\n                    Color.parseColor(ThemeManager.getValue(\"merchantHeaderView.backgroundColor\"))\n                )\n            }//\n\n        }\n        if (isFragmentAdded) {\n            currentCurrency.visibility = View.VISIBLE\n        } else {\n            currentCurrency.visibility = View.GONE\n        }\n//        val itemListDummy: ArrayList<Int> =\n//            arrayListOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22)\n        val itemListDummy: ArrayList<String> =\n            arrayListOf(\"1\", \"2\", \"3\", \"4\", \"5\")\n        val currencyViewFragment = CurrencyViewFragment()\n        itemCount.setOnClickListener {\n            tapAmountSectionInterface?.didClickItems()\n            if (isFragmentAdded) {\n                Handler().postDelayed({\n                    childFragmentManager\n                        .beginTransaction()\n                        .remove(currencyViewFragment)\n                        .commit()\n                }, 0)\n\n                separatorÙ€Ù€Layout.visibility = View.VISIBLE\n\n                mainChipGroup?.visibility = View.VISIBLE\n                separator_.visibility = View.VISIBLE\n                tapSeparatorViewLinear?.visibility = View.VISIBLE\n                tap_payment_input0.visibility = View.VISIBLE\n                separatorÙ€Ù€.visibility = View.VISIBLE\n                separatorÙ€Ù€.setBackgroundColor(Color.parseColor(ThemeManager.getValue(\"tapSeparationLine.backgroundColor\")))\n                paymentLayout.removeAllViews()\n                paymentLayout.addView(tapCardInputView)\n                selectedCurrency.text = \"AED1000,000.000\"\n                itemCount.text = getString(R.string.items)\n\n            } else {\n                separatorÙ€Ù€Layout.visibility = View.GONE\n\n//                switch_pay_demo.payButton.visibility = View.GONE\n                separator_.visibility = View.GONE\n                separatorÙ€Ù€.visibility = View.GONE\n                Handler().postDelayed({\n                    mainChipGroup?.visibility = View.GONE\n                    tap_payment_input0.visibility = View.GONE\n                }, 0)\n\n                bottomSheetDialog.behavior.state = STATE_EXPANDED\n\n                if (cardFragmentadded) {\n                    childFragmentManager\n                        .beginTransaction()\n                        .remove(cardFragment)\n                        .commit()\n                } else {\n                    childFragmentManager\n                        .beginTransaction()\n                        .replace(R.id.fragment_container_nfc, currencyViewFragment)\n                        .commit()\n                }\n\n//                bottomSheetLayout?.let { layout ->\n//                    layout.post {\n//                        val addTransition: Transition =\n//                            TransitionInflater.from(context)\n//                                .inflateTransition(R.transition.add_fragment)\n//                        TransitionManager.beginDelayedTransition(layout, addTransition)\n//                    }\n//                }\n\n                currentCurrency.visibility = View.VISIBLE\n                selectedCurrency.text = \"KD1000,000.000\"\n                itemCount.text = LocalizationManager.getValue(\"close\", \"Common\")\n                Handler().postDelayed({\n                    tabLayout.visibility = View.VISIBLE\n                    paymentLayout.visibility = View.VISIBLE\n                }, 0)\n//                fragment_container_nfc.visibility = View.GONE\n\n\n            }\n            isFragmentAdded = !isFragmentAdded\n        }\n        paymentLayout = view.findViewById(R.id.payment_input_layout)\n        println(\"bottom state ${bottomSheetDialog.behavior.state}\")\n    }\n\n    private fun getAmountViewDataSOurce(): AmountViewDataSource {\n        return AmountViewDataSource(\n            selectedCurr = \"1000,000.000\",\n            selectedCurrText = \"AED\",\n            currentCurr = \"1000,000.000\",\n            currentCurrText = \"KD\",\n            itemCount = if (context?.let { LocalizationManager.getLocale(it).language } == \"en\") getString(\n                R.string.items\n            ) else \"22 Ø¹Ù†ØµØ±\"\n        )\n    }\n\n    companion object {\n        const val TAG = \"ModalBottomSheet\"\n    }\n\n    override fun onTabSelected(position: Int?) {\n        position?.let {\n            selectedTab = it\n            paymentLayout.removeAllViews()\n            if (position == 0) {\n                paymentLayout.addView(tapCardInputView)\n                switchDemo.setSwitchDataSource(getSwitchDataSource(getString(R.string.nfc_text)))\n                mainSwitch.setSwitchDataSource(getSwitchDataSource(getString(R.string.nfc_text)))\n                cardScannerBtn?.visibility = View.VISIBLE\n                nfcButton?.visibility = View.VISIBLE\n                clearView?.visibility = View.GONE\n            } else if (position == 1) {\n                paymentLayout.addView(tapMobileInputView)\n                switchDemo.setSwitchDataSource(getSwitchDataSource(getString(R.string.mobile_text)))\n                mainSwitch.setSwitchDataSource(getSwitchDataSource(getString(R.string.mobile_text)))\n                cardScannerBtn?.visibility = View.GONE\n                nfcButton?.visibility = View.GONE\n                mobileNumberEditText?.addTextChangedListener(object : TextWatcher {\n                    override fun onTextChanged(\n                        s: CharSequence,\n                        start: Int,\n                        before: Int,\n                        count: Int\n                    ) {\n                    }\n\n                    override fun afterTextChanged(mobileText: Editable) {\n                        if (mobileText.length > 2) {\n                            clearView?.visibility = View.VISIBLE\n                        }\n                        if (mobileText.length == 12) {\n                            mobileNumberEditText?.text = mobileText\n                        }\n                        println(\"mobile number value ${mobileText.length}\")\n                    }\n\n                    override fun beforeTextChanged(\n                        s: CharSequence,\n                        start: Int,\n                        count: Int,\n                        after: Int\n                    ) {\n                    }\n                })\n            }\n        }\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    @SuppressLint(\"UseCompatLoadingForDrawables\")\n    private fun addCardsTab() {\n\n        tabLayout.changeTabItemAlphaValue(0.9f)\n\n        val items = ArrayList<SectionTabItem>()\n\n        items.add(\n            SectionTabItem(\n                \"https://tap-assets.b-cdn.net/payment-options/v2/light/visa.png\",\n                \"https://tap-assets.b-cdn.net/payment-options/v2/light/visa.png\",\n                CardBrand.visa\n            )\n        )\n        items.add(\n            SectionTabItem(\n                \"https://tap-assets.b-cdn.net/payment-options/v2/light/mastercard.png\",\n                \"https://tap-assets.b-cdn.net/payment-options/v2/light/mastercard.png\",\n                CardBrand.masterCard\n            )\n        )\n\n        items.add(\n            SectionTabItem(\n                \"https://tap-assets.b-cdn.net/payment-options/v2/light/american_express.png\",\n                \"https://tap-assets.b-cdn.net/payment-options/v2/light/american_express.png\",\n                CardBrand.americanExpress\n            )\n        )\n\n        tabLayout.addSection(items)\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    @SuppressLint(\"UseCompatLoadingForDrawables\")\n    private fun addMobileTab() {\n        /**\n         * if there is only one payment method we will set visibility gone for tablayout\n         * and set the payment method icon for inline input card\n         * and set visibility  for separator after chips gone\n         */\n//        tabLayout.visibility = View.GONE\n//        tapSeparatorViewLinear?.visibility = View.GONE\n//        tapCardInputView.setSingleCardInput(company.tap.cardinputwidget.CardBrand.Visa)\n\n\n        tabLayout.changeTabItemAlphaValue(0.9f)\n\n\n        val items = ArrayList<SectionTabItem>()\n\n        items.add(\n            SectionTabItem(\n                \"https://img.icons8.com/color/2x/visa.png\",\n                \"https://img.icons8.com/color/2x/visa.png\",\n                CardBrand.ooredoo\n            )\n        )\n\n\n        items.add(\n            SectionTabItem(\n                \"https://img.icons8.com/color/2x/visa.png\",\n                \"https://img.icons8.com/color/2x/visa.png\",\n                CardBrand.ooredoo\n            )\n        )\n        items.add(\n            SectionTabItem(\n                \"https://img.icons8.com/color/2x/visa.png\",\n                \"https://img.icons8.com/color/2x/visa.png\",\n                CardBrand.ooredoo\n            )\n        )\n        items.add(\n            SectionTabItem(\n                \"https://img.icons8.com/color/2x/visa.png\",\n                \"https://img.icons8.com/color/2x/visa.png\",\n                CardBrand.ooredoo\n            )\n        )\n        tabLayout.addSection(items) //\n\n    }\n\n    private fun setupBrandDetection() {\n        tapCardInputView.setCardNumberTextWatcher(object : TextWatcher {\n            @RequiresApi(Build.VERSION_CODES.N)\n            @SuppressLint(\"ResourceAsColor\")\n            override fun afterTextChanged(s: Editable?) {\n                if (s.isNullOrEmpty())\n                    tabLayout.resetBehaviour()\n                val card = CardValidator.validate(s.toString())\n                if (card.cardBrand != null) {\n                    activity?.window?.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE)\n                    clearView?.visibility = View.VISIBLE\n                    tabLayout.selectTab(\n                        card.cardBrand,\n                        card.validationState == CardValidationState.valid\n                    )\n                    nfcButton?.visibility = View.GONE\n                    cardScannerBtn?.visibility = View.GONE\n                    tapCardInputView.holderNameEnabled = true\n                    if (card.validationState == CardValidationState.incomplete) {\n                        switchLayout?.visibility = View.GONE\n                        switchMerchantCheckout?.visibility = View.GONE\n                        switchMerchantCheckout?.isChecked = true\n                        switchgoPayCheckout?.isChecked = true\n                        switch_pay_demo.payButton.isActivated = true\n                        switch_pay_demo.payButton.visibility = View.VISIBLE\n                        switchgoPayCheckout?.visibility = View.GONE\n                        savegoPay?.visibility = View.GONE\n                        alertgoPay?.visibility = View.GONE\n                        separatorView?.visibility = View.GONE\n                        switchDemo.setSwitchDataSource(getSwitchDataSource(getString(R.string.mobile_save_text)))\n                        mainSwitch.setSwitchDataSource(getSwitchDataSource(getString(R.string.mobile_save_text)))\n                        alertMessage?.visibility = View.VISIBLE\n                        alertMessage?.text = (LocalizationManager.getValue(\n                            \"Error\",\n                            \"Hints\",\n                            \"wrongCardNumber\"\n                        ))\n                        alert_text.visibility = View.VISIBLE\n                    }\n                    if (s?.trim()?.length == 19 && card.validationState == CardValidationState.valid) {\n                        /**\n                         * This an important part for showing switches part correctly as in design\n                         */\n                        switch_pay_demo.payButton.isActivated\n                        switchSaveDemo?.visibility = View.VISIBLE\n                        switchMerchantCheckout?.visibility = View.VISIBLE\n                        cardSwitch.visibility = View.VISIBLE\n                        mainSwitch.visibility = View.VISIBLE\n                        alertgoPay?.visibility = View.VISIBLE\n                        separatorView?.visibility = View.VISIBLE\n                        switchDemo.setSwitchDataSource(getSwitchDataSource(getString(R.string.savecard_text)))\n                        mainSwitch.setSwitchDataSource(getSwitchDataSource(getString(R.string.savecard_text)))\n                        alertMessage?.visibility = View.VISIBLE\n                        if (card.validationState == CardValidationState.invalid) {\n                            alertMessage?.text = (LocalizationManager.getValue(\n                                \"Error\",\n                                \"Hints\",\n                                \"wrongCardNumber\"\n                            ))\n                            alert_text.visibility = View.VISIBLE\n                        } else {\n                            alertMessage?.text = (LocalizationManager.getValue(\n                                \"Warning\",\n                                \"Hints\",\n                                \"missingExpiryCVV\"\n                            ))\n//                            alertMessage?.setText(\"Expiry date & CVV number are missing.\")\n                            alert_text.visibility = View.VISIBLE\n                        }\n                        tapCardInputView.setSingleCardInput(CardBrandSingle.fromCode(card.cardBrand.name))\n                        tabLayout.visibility = View.GONE\n                    }\n                }\n            }\n\n            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {\n\n            }\n\n            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {}\n        })\n\n        tapCardInputView.setCvcNumberTextWatcher(object : TextWatcher {\n            @RequiresApi(Build.VERSION_CODES.N)\n            @SuppressLint(\"ResourceAsColor\")\n            override fun afterTextChanged(s: Editable?) {\n                if (s.isNullOrEmpty()) {\n//                    tabLayout.resetBehaviour()\n                } else\n                    alert_text.visibility = View.GONE\n            }\n\n            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}\n            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {}\n        })\n\n        tapCardInputView.setExpiryDateTextWatcher(object : TextWatcher {\n            @RequiresApi(Build.VERSION_CODES.N)\n            @SuppressLint(\"ResourceAsColor\")\n            override fun afterTextChanged(s: Editable?) {\n                if (s.isNullOrEmpty()) {\n//                    tabLayout.resetBehaviour()\n                } else {\n                    alertMessage?.text = \"CVV number are missing.\"\n                    alertMessage?.text = (LocalizationManager.getValue(\n                        \"Warning\",\n                        \"Hints\",\n                        \"missingCVV\"\n                    ))\n                    alert_text.visibility = View.VISIBLE\n                    alert_text.setBackgroundColor(Color.parseColor(\"#4cffbe60\"))\n                    alertMessage?.setTextColor(Color.parseColor(\"#ea611c\"))\n                }\n            }\n\n            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}\n            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {}\n        })\n\n    }\n\n    // Configuring switch states and listening to switch states.\n\n    /**\n     * We will change tap card switch background if main switch checked or not\n     */\n    private fun configureSwitch() {\n//        switch_pay_demo.tapCardSwitchLinear.setBackgroundColor(Color.parseColor(ThemeManager.getValue(\"TapSwitchView.main.backgroundColor\")))\n//                switch_pay_demo.tapCardSwitchLinear.setBackgroundColor(Color.parseColor(ThemeManager.getValue(\"TapSwitchView.backgroundColor\")))\n\n        setBottomBorders(\n            cardSwitch,\n            30f,// corner raduis\n            0.0f,\n            Color.parseColor(ThemeManager.getValue(\"TapSwitchView.backgroundColor\")),// stroke color\n            Color.parseColor(ThemeManager.getValue(\"TapSwitchView.backgroundColor\")),// tint color\n            Color.parseColor(ThemeManager.getValue(\"TapSwitchView.backgroundColor\"))\n        )//\n        setBottomBorders(\n            cardSwitch,\n            30f,// corner raduis\n            0.0f,\n            Color.parseColor(ThemeManager.getValue(\"TapSwitchView.backgroundColor\")),// stroke color\n            Color.parseColor(ThemeManager.getValue(\"TapSwitchView.backgroundColor\")),// tint color\n            Color.parseColor(ThemeManager.getValue(\"TapSwitchView.backgroundColor\"))\n        )//\n        switchSaveDemo?.setOnCheckedChangeListener { _, isChecked ->\n            if (isChecked) {\n                switch_pay_demo.payButton.isActivated\n                payButton.setButtonDataSource(\n                    true,\n                    context?.let { LocalizationManager.getLocale(it).language },\n                    LocalizationManager.getValue(\"pay\", \"ActionButton\"),\n                    Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.paymentBackgroundColor\")),\n                    Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.titleLabelColor\"))\n                )\n                /**\n                 * Here we will check if there is saving options if NOT ----> We will just activate action button\n                 * switch_pay_demo.payButton.isActivated\n                 * if YES -----> we will set Logic of function mainSwitchCheckedAction()\n                 */\n                mainSwitchCheckedAction()\n\n            } else mainSwitchUncheckedAction()\n        }\n        switchMerchantCheckout?.setOnCheckedChangeListener { _, _ -> switchMerchantCheckoutChangeCheckedAction() }\n        switchgoPayCheckout?.setOnCheckedChangeListener { _, _ -> switchGoPayCheckoutChangeCheckedAction() }\n    }\n\n    private fun switchMerchantCheckoutChangeCheckedAction(){\n        if (!switchMerchantCheckout?.isChecked!! && !switchgoPayCheckout?.isChecked!!) {\n            switchSaveDemo?.isChecked = false\n            switchLayout?.visibility = View.GONE\n            switchMerchantCheckout?.visibility = View.GONE\n            switchMerchantCheckout?.isChecked = false\n            switchgoPayCheckout?.isChecked = false\n            switchgoPayCheckout?.visibility = View.GONE\n            savegoPay?.visibility = View.GONE\n            alertgoPay?.visibility = View.GONE\n            separatorView?.visibility = View.GONE\n        }\n    }\n\n    private fun switchGoPayCheckoutChangeCheckedAction(){\n        if (!switchMerchantCheckout?.isChecked!! && !switchgoPayCheckout?.isChecked!!) {\n            switchSaveDemo?.isChecked = false\n            switchLayout?.visibility = View.GONE\n            switchMerchantCheckout?.visibility = View.GONE\n            switchMerchantCheckout?.isChecked = false\n            switchgoPayCheckout?.isChecked = false\n            switchgoPayCheckout?.visibility = View.GONE\n            savegoPay?.visibility = View.GONE\n            alertgoPay?.visibility = View.GONE\n            separatorView?.visibility = View.GONE\n        }\n    }\n\n\n    fun mainSwitchCheckedAction() {\n        if (ThemeManager.currentTheme.isNotEmpty() && ThemeManager.currentTheme.contains(\"dark\")) {\n            switch_pay_demo.tapCardSwitchLinear.setBackgroundResource(company.tap.tapuilibrary.R.drawable.ic_blurbackgroundblack)\n        } else {\n            switch_pay_demo.tapCardSwitchLinear.setBackgroundResource(company.tap.tapuilibrary.R.drawable.blurbackground)\n        }\n        cardSwitch.cardElevation = 2.5f\n\n        setBorderedView(\n            mainSwitch.card,\n            40f,// corner raduis\n            0.0f,\n            Color.parseColor(ThemeManager.getValue(\"TapSwitchView.main.backgroundColor\")),// stroke color\n            Color.parseColor(ThemeManager.getValue(\"TapSwitchView.main.backgroundColor\")),// tint color\n            Color.parseColor(ThemeManager.getValue(\"TapSwitchView.main.backgroundColor\"))\n        )//\n        switch_pay_demo.payButton.stateListAnimator = null\n        switch_pay_demo.payButton.isActivated\n        switch_pay_demo.payButton.setButtonDataSource(\n            true,\n            company.tap.tapuisample.adapters.context?.let { LocalizationManager.getLocale(it).language },\n            LocalizationManager.getValue(\"pay\", \"ActionButton\"),\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.paymentBackgroundColor\")),\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.titleLabelColor\"))\n        )\n        switchLayout?.visibility = View.VISIBLE\n        switchMerchantCheckout?.visibility = View.VISIBLE\n        switchMerchantCheckout?.isChecked = true\n        switchgoPayCheckout?.isChecked = true\n        switchgoPayCheckout?.visibility = View.VISIBLE\n        savegoPay?.visibility = View.VISIBLE\n        alertgoPay?.visibility = View.VISIBLE\n        separatorView?.visibility = View.VISIBLE\n    }\n\n    private fun mainSwitchUncheckedAction() {\n        setBorderedView(\n            mainSwitch.card,\n            0f,// corner raduis\n            0.0f,\n            Color.parseColor(ThemeManager.getValue(\"TapSwitchView.main.backgroundColor\")),// stroke color\n            Color.parseColor(ThemeManager.getValue(\"TapSwitchView.main.backgroundColor\")),// tint color\n            Color.parseColor(ThemeManager.getValue(\"TapSwitchView.main.backgroundColor\"))\n        )//\n        switch_pay_demo.tapCardSwitchLinear.setBackgroundColor(\n            Color.parseColor(\n                ThemeManager.getValue(\n                    \"TapSwitchView.main.backgroundColor\"\n                )\n            )\n        )\n        cardSwitch.cardElevation = 0f\n\n//        switch_pay_demo.payButton.stateListAnimator = null\n//        switch_pay_demo.payButton.setButtonDataSource(\n//            false,\n//            company.tap.tapuisample.adapters.context?.let { LocalizationManager.getLocale(it).language },\n//            LocalizationManager.getValue(\"pay\", \"ActionButton\"),\n//            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n//            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\"))\n//        )\n//        switchLayout?.visibility = View.GONE\n//        switchMerchantCheckout?.visibility = View.GONE\n//        switchMerchantCheckout?.isChecked = false\n//        switchgoPayCheckout?.isChecked = false\n//        switchgoPayCheckout?.visibility = View.GONE\n//        savegoPay?.visibility = View.GONE\n//        alertgoPay?.visibility = View.GONE\n//        separatorView?.visibility = View.GONE\n\n    }\n\n\n\n    private fun getSuccessDataSource(text: String): ActionButtonDataSource {\n        switch_pay_demo.payButton.stateListAnimator = null\n        return ActionButtonDataSource(\n            text = text,\n            textSize = 20f,\n            textColor = Color.WHITE,\n            cornerRadius = 100f,\n            successImageResources = R.drawable.checkmark,\n            backgroundColor = resources.getColor(R.color.button_green)\n        )\n    }\n\n    override fun onCardSelectedAction(isSelected: Boolean) {\n        if (isSelected) {\n            switch_pay_demo.payButton.isActivated = true\n            switch_pay_demo.payButton.setButtonDataSource(\n                true,\n                company.tap.tapuisample.adapters.context?.let { LocalizationManager.getLocale(it).language },\n                LocalizationManager.getValue(\"pay\", \"ActionButton\"),\n                Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.paymentBackgroundColor\")),\n                Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.titleLabelColor\"))\n            )\n\n        } else {\n\n            switch_pay_demo.payButton.isActivated = false\n            switch_pay_demo.payButton.setButtonDataSource(\n                false,\n                company.tap.tapuisample.adapters.context?.let { LocalizationManager.getLocale(it).language },\n                LocalizationManager.getValue(\"pay\", \"ActionButton\"),\n                Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n                Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\"))\n            )\n        }\n    }\n\n    override fun onDeleteIconClicked(stopAnimation: Boolean, itemId: Int) {\n        if (stopAnimation) {\n            stopShakingCards(chipRecycler)\n            groupAction?.text = \"Edit\"\n        } else groupAction?.text = \"Close\"\n\n    }\n\n\n    private fun replaceBetweenFragments() {\n        switch_pay_demo.payButton.visibility = View.GONE\n        dialog?.window?.attributes?.windowAnimations = R.anim.slide_up\n        childFragmentManager.beginTransaction().replace(\n            R.id.webViewContainer,\n            WebFragment(this)\n        ).commit()\n    }\n\n    override fun redirectLoadingFinished(done: Boolean) {\n        changeBottomSheetTransition()\n        if (done) {\n            switch_pay_demo.payButton.visibility = View.VISIBLE\n            webViewContainer.visibility = View.GONE\n            switch_pay_demo.payButton.isActivated = true\n            switch_pay_demo.payButton.changeButtonState(ActionButtonState.SUCCESS)\n        } else {\n            switch_pay_demo.payButton.visibility = View.GONE\n            webViewContainer.visibility = View.VISIBLE\n        }\n    }\n\n    private fun changeBottomSheetTransition() {\n        bottomSheetLayout?.let { layout ->\n            layout.post {\n                TransitionManager.beginDelayedTransition(layout)\n            }\n        }\n    }\n\n    fun hideAllViews() {\n        switchLayout?.visibility = View.GONE\n        switchMerchantCheckout?.visibility = View.GONE\n        switchMerchantCheckout?.isChecked = false\n        switchgoPayCheckout?.isChecked = false\n        switchgoPayCheckout?.visibility = View.GONE\n        tabLayout.visibility = View.GONE\n        paymentLayout.visibility = View.GONE\n        tapHeaderSectionView.visibility = View.GONE\n        amountSectionView.visibility = View.GONE\n        switchDemo.visibility = View.GONE\n        mainSwitch.visibility = View.GONE\n        cardSwitch.visibility = View.GONE\n        tabLayout.visibility = View.GONE\n        paymentLayout.visibility = View.GONE\n        businessIcon.visibility = View.GONE\n        businessPlaceholder.visibility = View.GONE\n        amountSectionView.visibility = View.GONE\n        switchDemo.visibility = View.GONE\n        separatorView?.visibility = View.GONE\n        chipRecycler.visibility = View.GONE\n        fragment_container_nfc.visibility = View.GONE\n//       selectedCurrency.visibility= View.GONE\n        nfcButton?.visibility = View.GONE\n        cardScannerBtn?.visibility = View.GONE\n        tap_payment_input0?.visibility = View.GONE\n        switchSaveDemo?.visibility = View.GONE\n        savegoPay?.visibility = View.GONE\n        alertgoPay?.visibility = View.GONE\n        saveCardorMobile?.visibility = View.GONE\n        chipRecycler.visibility = View.GONE\n        switchSaveDemo?.visibility = View.GONE\n        savegoPay?.visibility = View.GONE\n        alertgoPay?.visibility = View.GONE\n        saveCardorMobile?.visibility = View.GONE\n        headerView?.visibility = View.GONE\n        separator.visibility = View.GONE\n        groupAction?.visibility = View.GONE\n        groupName?.visibility = View.GONE\n        separator_.visibility = View.GONE\n        topSeparator.visibility = View.GONE\n        separatorÙ€Ù€.visibility = View.GONE\n    }\n\n\n    fun setAllSeparatorTheme() {\n        val separatorViewTheme = SeparatorViewTheme()\n        separatorViewTheme.strokeColor =\n            Color.parseColor(ThemeManager.getValue(\"tapSeparationLine.backgroundColor\"))\n        separatorViewTheme.strokeHeight = ThemeManager.getValue(\"tapSeparationLine.height\")\n        indicatorSeparator.setTheme(separatorViewTheme)\n        topSeparator.setTheme(separatorViewTheme)\n        separator.setTheme(separatorViewTheme)\n        separator_.setTheme(separatorViewTheme)\n        separatorÙ€Ù€.setTheme(separatorViewTheme)\n    }\n\n    fun setTapMobileInputViewTheme() {\n        val editTextTheme = EditTextTheme()\n        editTextTheme.backgroundTint =\n            Color.parseColor(ThemeManager.getValue(\"phoneCard.commonAttributes.backgroundColor\"))\n        editTextTheme.textColorHint =\n            Color.parseColor(ThemeManager.getValue(\"phoneCard.textFields.placeHolderColor\"))\n        editTextTheme.textSize = ThemeManager.getFontSize(\"phoneCard.textFields.font\")\n        tapMobileInputView.setTheme(editTextTheme)\n        tapMobileInputView.mobileNumber.setBackgroundColor(Color.parseColor(ThemeManager.getValue(\"phoneCard.commonAttributes.backgroundColor\")))\n        tapMobileInputView.mobilePaymentMainLinear.setBackgroundColor(\n            Color.parseColor(\n                ThemeManager.getValue(\n                    \"phoneCard.commonAttributes.backgroundColor\"\n                )\n            )\n        )\n        tapMobileInputView.mobileImage.setBackgroundColor(Color.parseColor(ThemeManager.getValue(\"phoneCard.commonAttributes.backgroundColor\")))\n    }\n\n    override fun onEnterValidCardNumberActionListener() {\n        TODO(\"Not yet implemented\")\n    }\n\n    override fun onEnterValidPhoneNumberActionListener() {\n        TODO(\"Not yet implemented\")\n    }\n\n    override fun onSelectPaymentOptionActionListener() {\n        TODO(\"Not yet implemented\")\n    }\n\n    override fun onStateChanged(state: ActionButtonState) {\n\n    }\n\n//    override fun onClickActionButton() {\n//        if (actionButton.isActivated) {\n//            changeBottomSheetTransition()\n//            hideAllViews()\n//            if (paymentsList[2] == 3) {\n//                Toast.makeText(context, \"goPay is clicked\", Toast.LENGTH_SHORT).show()\n//                goPayLoginInput.visibility= View.VISIBLE\n//                goPayPassword.visibility= View.VISIBLE\n////                        childFragmentManager\n////                            .beginTransaction()\n////                            .remove(WebFragment(this))\n////                            .commit()\n////                        dialog?.hide()\n//                changeBottomSheetTransition()\n//            } else\n//                switch_pay_demo.payButton.addChildView(\n//                    switch_pay_demo.payButton.getImageView(\n//                        R.drawable.loader,\n//                        1\n//                    ) { replaceBetweenFragments() })\n//        }\n//    }\n\n    override fun showHideClearImage(show: Boolean) {\n        if (show) {\n            clearView?.visibility = View.VISIBLE\n        } else {\n            clearView?.visibility = View.VISIBLE\n        }\n    }\n\n    override fun onChangeClicked() {\n\n//        AnimationEngine.applyTransition(bottomSheet, SLIDE)\n        goPayLoginInput?.visibility = View.VISIBLE\n        goPayPasswordInput?.visibility = View.GONE\n        otpView?.visibility = View.GONE\n    }\n\n    override fun onEmailValidated() {\n//        AnimationEngine.applyTransition(bottomSheet, SLIDE)\n        goPayLoginInput?.visibility = View.GONE\n        otpView?.visibility = View.GONE\n        otpView?.changePhoneCardView?.visibility = View.GONE\n        goPayPasswordInput?.visibility = View.VISIBLE\n        goPayPasswordInput?.setLoginInterface(this, goPayLoginInput?.textInput?.text.toString())\n    }\n\n    override fun onPhoneValidated() {\n//        AnimationEngine.applyTransition(bottomSheet, SLIDE)\n//        activity?.supportFragmentManager?.let { OTPFragment().show(it,null) }\n        goPayPasswordInput?.visibility = View.GONE\n        goPayLoginInput?.visibility = View.GONE\n        otpView?.visibility = View.VISIBLE\n        otpView?.changePhoneCardView?.visibility = View.VISIBLE\n\n//        val blurredBitmap: Bitmap? = otpView?.otpLinearLayout?.let { BlurBuilder.blur(it) }\n//        otpView?.otpLinearLayout?.background = BitmapDrawable(resources, blurredBitmap)\n\n    }\n\n\n    @SuppressLint(\"SetTextI18n\")\n    override fun getPhoneNumber(phoneNumber: String, countryCode: String, maskedValue: String) {\n        otpView?.mobileNumberText?.text = \"+${countryCode.replace(\"+\", \" \")} $maskedValue\"\n        Log.d(\"countrycode\", countryCode)\n        Log.d(\"countrycode......\", countryCode.replace(\"+\", \" \"))\n    }\n\n    override fun onChangePhoneClicked() {\n        goPayLoginInput?.visibility = View.VISIBLE\n        goPayLoginInput?.changeDataSource(GoPayLoginDataSource())\n        goPayLoginInput?.inputType = GoPayLoginMethod.EMAIL\n        otpView?.visibility = View.GONE\n        otpView?.changePhoneCardView?.visibility = View.GONE\n\n    }\n\n    override fun onOtpButtonConfirmationClick(otpNumber: String): Boolean {\n        Log.d(\"isValidOTP\", (otpNumber == \"111111\").toString())\n        return otpNumber == \"111111\"\n    }\n\n\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/company/tap/tapuisample/fragments/BottomSheetDialog.kt b/app/src/main/java/company/tap/tapuisample/fragments/BottomSheetDialog.kt
--- a/app/src/main/java/company/tap/tapuisample/fragments/BottomSheetDialog.kt	(revision 2eb01472d82834bef9c43981e58039332c1b37c0)
+++ b/app/src/main/java/company/tap/tapuisample/fragments/BottomSheetDialog.kt	(date 1681045220990)
@@ -29,6 +29,7 @@
 import androidx.recyclerview.widget.RecyclerView
 import androidx.transition.TransitionManager
 import com.google.android.material.bottomsheet.BottomSheetBehavior.STATE_EXPANDED
+import com.google.android.material.bottomsheet.BottomSheetDialogFragment
 import company.tap.cardinputwidget.CardBrandSingle
 import company.tap.cardinputwidget.widget.inline.InlineCardInput
 import company.tap.tapcardvalidator_android.CardBrand
@@ -162,6 +163,7 @@
         otpView?.setOtpButtonConfirmationInterface(this)
         initGoPay(view)
         activity?.window?.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
+
         return view.rootView
     }
 
Index: .idea/deploymentTargetDropDown.xml
===================================================================
diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
deleted file mode 100644
--- a/.idea/deploymentTargetDropDown.xml	(revision 2eb01472d82834bef9c43981e58039332c1b37c0)
+++ /dev/null	(revision 2eb01472d82834bef9c43981e58039332c1b37c0)
@@ -1,17 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="deploymentTargetDropDown">
-    <runningDeviceTargetSelectedWithDropDown>
-      <Target>
-        <type value="RUNNING_DEVICE_TARGET" />
-        <deviceKey>
-          <Key>
-            <type value="VIRTUAL_DEVICE_PATH" />
-            <value value="$USER_HOME$/.android/avd/Pixel_3a_XL_API_31_1.avd" />
-          </Key>
-        </deviceKey>
-      </Target>
-    </runningDeviceTargetSelectedWithDropDown>
-    <timeTargetWasSelectedWithDropDown value="2023-04-05T12:27:49.782678Z" />
-  </component>
-</project>
\ No newline at end of file
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"GradleMigrationSettings\" migrationVersion=\"1\" />\n  <component name=\"GradleSettings\">\n    <option name=\"linkedExternalProjectsSettings\">\n      <GradleProjectSettings>\n        <option name=\"delegatedBuild\" value=\"true\" />\n        <option name=\"testRunner\" value=\"GRADLE\" />\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\n        <option name=\"modules\">\n          <set>\n            <option value=\"$PROJECT_DIR$\" />\n            <option value=\"$PROJECT_DIR$/app\" />\n            <option value=\"$PROJECT_DIR$/tapuilibrary\" />\n          </set>\n        </option>\n        <option name=\"resolveModulePerSourceSet\" value=\"false\" />\n      </GradleProjectSettings>\n    </option>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/gradle.xml b/.idea/gradle.xml
--- a/.idea/gradle.xml	(revision 2eb01472d82834bef9c43981e58039332c1b37c0)
+++ b/.idea/gradle.xml	(date 1681040527237)
@@ -8,6 +8,7 @@
         <option name="testRunner" value="GRADLE" />
         <option name="distributionType" value="DEFAULT_WRAPPED" />
         <option name="externalProjectPath" value="$PROJECT_DIR$" />
+        <option name="gradleJvm" value="Embedded JDK" />
         <option name="modules">
           <set>
             <option value="$PROJECT_DIR$" />
@@ -15,7 +16,6 @@
             <option value="$PROJECT_DIR$/tapuilibrary" />
           </set>
         </option>
-        <option name="resolveModulePerSourceSet" value="false" />
       </GradleProjectSettings>
     </option>
   </component>
Index: tapuilibrary/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>apply plugin: 'com.android.library'\napply plugin: 'kotlin-android'\napply plugin: 'kotlin-android-extensions'\napply plugin: 'kotlin-kapt'\nandroid {\n    compileSdkVersion 32\n\n\n    defaultConfig {\n        minSdkVersion 21\n        targetSdkVersion 32\n        versionCode 1\n        versionName \"1.0\"\n//        renderscriptSupportModeEnabled true\n\n\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\n        consumerProguardFiles 'consumer-rules.pro'\n    }\n\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\n        }\n    }\n\n    compileOptions {\n        sourceCompatibility JavaVersion.VERSION_1_8\n        targetCompatibility JavaVersion.VERSION_1_8\n    }\n\n    kotlinOptions {\n        jvmTarget = JavaVersion.VERSION_1_8.toString()\n    }\n\n    sourceSets{\n        main.java.srcDirs += 'src/main/kotlin'\n    }\n//    dataBinding {\n//        enabled = true\n//    }\n\n}\n\ndependencies {\n//    kapt 'com.android.databinding:compiler:3.0.0'\n\n    implementation fileTree(dir: 'libs', include: ['*.jar'])\n    implementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version\"\n    implementation 'androidx.appcompat:appcompat:1.1.0'\n    implementation 'androidx.core:core-ktx:1.3.0'\n    testImplementation 'junit:junit:4.13.2'\n    androidTestImplementation 'androidx.test.ext:junit:1.1.5'\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'\n    api 'com.github.Tap-Payments:TapCardValidator-Android:2.1.7'\n    api 'com.google.android.material:material:1.3.0-alpha01'\n    api 'com.github.Tap-Payments:TapGLKit-Android:1.18'\n    annotationProcessor 'com.android.databinding:compiler:3.1.4'\n    implementation 'com.github.bumptech.glide:glide:4.11.0'\n    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'\n    implementation  'jp.wasabeef:blurry:3.0.0'\n    implementation 'io.alterac.blurkit:blurkit:1.1.0'\n    implementation 'com.squareup.picasso:picasso:2.5.2'\n    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'\n    implementation 'com.koushikdutta.ion:ion:3.1.0'\n    implementation 'com.github.Tap-Payments:TapNFCCardReaderKit-Android:0.0.1'\n    implementation \"io.reactivex.rxjava2:rxjava:2.2.19\"\n    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'\n    implementation 'com.github.Tap-Payments:TapCardScannerKit-Android:0.0.1.5'\n    implementation 'company.tap:PayCards-Tap-Android:0.1.6.4'\n   // implementation 'com.github.Tap-Payments:TapCardInputKit-Android:0.1.0.25'\n   // api 'com.github.Tap-Payments:TapCardInputKit-Android:0.1.0.25'\n    api 'com.github.Tap-Payments:LocalisationManager-Android:0.0.1.30'\n\n    implementation 'jp.wasabeef:blurry:4.0.0'\n    implementation \"com.hbb20:ccp:2.2.2\"\n\n    implementation 'com.google.android.gms:play-services-auth:19.2.0'\n\n   // implementation 'com.github.Tap-Payments:CheckoutSDK-Android:0.0.0.1'\n    implementation \"com.github.Tap-Payments:TapGLKit-Android:1.18\"\n    implementation(\"io.coil-kt:coil:1.2.0\")\n    implementation(\"io.coil-kt:coil-svg:1.2.0\")\n   // implementation 'com.github.corouteam:GlideToVectorYou:v2.0.0'\n    implementation 'com.github.2coffees1team:GlideToVectorYou:v2.0.0'\n    implementation 'com.tomergoldst.android:tooltips:1.0.10'\n    implementation (\"com.github.skydoves:balloon:1.4.7\") {\n        exclude group: \"androidx.appcompat\"\n        exclude group: \"androidx.fragment\"\n    }\n    implementation 'io.alterac.blurkit:blurkit:1.1.0'\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tapuilibrary/build.gradle b/tapuilibrary/build.gradle
--- a/tapuilibrary/build.gradle	(revision 2eb01472d82834bef9c43981e58039332c1b37c0)
+++ b/tapuilibrary/build.gradle	(date 1681042636512)
@@ -90,5 +90,8 @@
         exclude group: "androidx.fragment"
     }
     implementation 'io.alterac.blurkit:blurkit:1.1.0'
+    implementation 'jp.wasabeef:glide-transformations:4.3.0'
+    // If you want to use the GPU Filters
+    implementation 'jp.co.cyberagent.android:gpuimage:2.1.0'
 }
 
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"CompilerConfiguration\">\n    <bytecodeTargetLevel target=\"1.8\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/compiler.xml b/.idea/compiler.xml
--- a/.idea/compiler.xml	(revision 2eb01472d82834bef9c43981e58039332c1b37c0)
+++ b/.idea/compiler.xml	(date 1681040527241)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="CompilerConfiguration">
-    <bytecodeTargetLevel target="1.8" />
+    <bytecodeTargetLevel target="11" />
   </component>
 </project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"DesignSurface\">\n    <option name=\"filePathToZoomLevelMap\">\n      <map>\n        <entry key=\"../../../../../../layout/custom_preview.xml\" value=\"0.37222222222222223\" />\n        <entry key=\"../../../../layout/custom_preview.xml\" value=\"0.10595358224016145\" />\n        <entry key=\"app/src/main/res/drawable-xhdpi/border_shadow_black.xml\" value=\"0.222\" />\n        <entry key=\"app/src/main/res/drawable/corner_radius.xml\" value=\"0.1715\" />\n        <entry key=\"app/src/main/res/layout/activity_action_button.xml\" value=\"0.1373873873873874\" />\n        <entry key=\"app/src/main/res/layout/activity_main.xml\" value=\"0.165\" />\n        <entry key=\"app/src/main/res/layout/custom_bottom_sheet.xml\" value=\"0.125\" />\n        <entry key=\"app/src/main/res/layout/item_knet.xml\" value=\"0.1554054054054054\" />\n        <entry key=\"app/src/main/res/layout/item_saved_card.xml\" value=\"0.15360360360360362\" />\n        <entry key=\"app/src/main/res/layout/tap_card_switch.xml\" value=\"0.1646403242147923\" />\n        <entry key=\"app/src/main/res/layout/tap_main_header.xml\" value=\"0.3512014787430684\" />\n        <entry key=\"app/src/main/res/layout/tap_payment_input.xml\" value=\"0.4224548049476689\" />\n        <entry key=\"tapuilibrary/src/main/res/drawable-hdpi/border_shadow_black.xml\" value=\"0.189\" />\n        <entry key=\"tapuilibrary/src/main/res/drawable-mdpi/corner_radius.xml\" value=\"0.1715\" />\n        <entry key=\"tapuilibrary/src/main/res/drawable-mdpi/corner_radius_bottom.xml\" value=\"0.121\" />\n        <entry key=\"tapuilibrary/src/main/res/drawable/border_currency.xml\" value=\"0.121\" />\n        <entry key=\"tapuilibrary/src/main/res/drawable/border_currency_black.xml\" value=\"0.121\" />\n        <entry key=\"tapuilibrary/src/main/res/drawable/border_gopay.xml\" value=\"0.121\" />\n        <entry key=\"tapuilibrary/src/main/res/drawable/border_oval.xml\" value=\"0.2035\" />\n        <entry key=\"tapuilibrary/src/main/res/drawable/border_shadow_white.xml\" value=\"0.222\" />\n        <entry key=\"tapuilibrary/src/main/res/drawable/border_unclick.xml\" value=\"0.19\" />\n        <entry key=\"tapuilibrary/src/main/res/drawable/border_unclick_2.xml\" value=\"0.1805\" />\n        <entry key=\"tapuilibrary/src/main/res/drawable/corner_radius_top.xml\" value=\"0.375\" />\n        <entry key=\"tapuilibrary/src/main/res/drawable/ic_add.xml\" value=\"0.1745\" />\n        <entry key=\"tapuilibrary/src/main/res/drawable/ic_group_6.xml\" value=\"0.1\" />\n        <entry key=\"tapuilibrary/src/main/res/drawable/ic_group_card.xml\" value=\"0.1\" />\n        <entry key=\"tapuilibrary/src/main/res/drawable/items_add.xml\" value=\"0.335\" />\n        <entry key=\"tapuilibrary/src/main/res/drawable/rounded_circle.xml\" value=\"0.1\" />\n        <entry key=\"tapuilibrary/src/main/res/drawable/rounded_rectangle.xml\" value=\"0.1\" />\n        <entry key=\"tapuilibrary/src/main/res/drawable/rounded_rectangle_black.xml\" value=\"0.1\" />\n        <entry key=\"tapuilibrary/src/main/res/layout/card_section_layout.xml\" value=\"0.3385416666666667\" />\n        <entry key=\"tapuilibrary/src/main/res/layout/custom_card_view.xml\" value=\"0.3385416666666667\" />\n        <entry key=\"tapuilibrary/src/main/res/layout/custom_sheet_nfc.xml\" value=\"0.10990990990990991\" />\n        <entry key=\"tapuilibrary/src/main/res/layout/fawry_payment_view.xml\" value=\"0.335\" />\n        <entry key=\"tapuilibrary/src/main/res/layout/item_saved_card.xml\" value=\"0.3385416666666667\" />\n        <entry key=\"tapuilibrary/src/main/res/layout/modal_bottom_sheet.xml\" value=\"0.11218229623137599\" />\n        <entry key=\"tapuilibrary/src/main/res/layout/otp_view.xml\" value=\"0.2375\" />\n        <entry key=\"tapuilibrary/src/main/res/layout/tap_alert_view.xml\" value=\"0.1\" />\n        <entry key=\"tapuilibrary/src/main/res/layout/tap_brandview.xml\" value=\"0.335\" />\n        <entry key=\"tapuilibrary/src/main/res/layout/tap_card_switch.xml\" value=\"0.6166666666666667\" />\n        <entry key=\"tapuilibrary/src/main/res/layout/tap_chip_group.xml\" value=\"0.18153153153153154\" />\n        <entry key=\"tapuilibrary/src/main/res/layout/tap_contact_detail_view.xml\" value=\"0.42130987292277616\" />\n        <entry key=\"tapuilibrary/src/main/res/layout/tap_inline_card_switch.xml\" value=\"0.36702767749699156\" />\n        <entry key=\"tapuilibrary/src/main/res/layout/tap_items_view_.xml\" value=\"0.20108695652173914\" />\n        <entry key=\"tapuilibrary/src/main/res/layout/tap_items_view_2.xml\" value=\"1.0724637681159421\" />\n        <entry key=\"tapuilibrary/src/main/res/layout/tap_main_amount.xml\" value=\"0.6167327880859376\" />\n        <entry key=\"tapuilibrary/src/main/res/layout/tap_main_header.xml\" value=\"0.3035143769968051\" />\n        <entry key=\"tapuilibrary/src/main/res/layout/tap_payment_input.xml\" value=\"0.3934065934065934\" />\n        <entry key=\"tapuilibrary/src/main/res/layout/tap_payment_input2.xml\" value=\"0.3385416666666667\" />\n        <entry key=\"tapuilibrary/src/main/res/layout/tap_selection_tablayout.xml\" value=\"0.3385416666666667\" />\n        <entry key=\"tapuilibrary/src/main/res/layout/tap_shipping_detail_view.xml\" value=\"0.3385416666666667\" />\n        <entry key=\"tapuilibrary/src/main/res/layout/textview_cell.xml\" value=\"0.3385416666666667\" />\n      </map>\n    </option>\n  </component>\n  <component name=\"ProjectInspectionProfilesVisibleTreeState\">\n    <entry key=\"Project Default\">\n      <profile-state>\n        <expanded-state>\n          <State />\n          <State>\n            <id>Android</id>\n          </State>\n          <State>\n            <id>CorrectnessLintAndroid</id>\n          </State>\n          <State>\n            <id>General</id>\n          </State>\n          <State>\n            <id>Java</id>\n          </State>\n          <State>\n            <id>Kotlin</id>\n          </State>\n          <State>\n            <id>LintAndroid</id>\n          </State>\n          <State>\n            <id>MessagesCorrectnessLintAndroid</id>\n          </State>\n          <State>\n            <id>Numeric issuesJava</id>\n          </State>\n          <State>\n            <id>PerformanceLintAndroid</id>\n          </State>\n          <State>\n            <id>Plugin DevKit</id>\n          </State>\n        </expanded-state>\n        <selected-state>\n          <State>\n            <id>Android</id>\n          </State>\n        </selected-state>\n      </profile-state>\n    </entry>\n  </component>\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_1_8\" default=\"true\" project-jdk-name=\"1.8\" project-jdk-type=\"JavaSDK\">\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\n  </component>\n  <component name=\"ProjectType\">\n    <option name=\"id\" value=\"Android\" />\n  </component>\n  <component name=\"masterDetails\">\n    <states>\n      <state key=\"Copyright.UI\">\n        <settings>\n          <splitter-proportions>\n            <option name=\"proportions\">\n              <list>\n                <option value=\"0.2\" />\n              </list>\n            </option>\n          </splitter-proportions>\n        </settings>\n      </state>\n      <state key=\"ScopeChooserConfigurable.UI\">\n        <settings>\n          <splitter-proportions>\n            <option name=\"proportions\">\n              <list>\n                <option value=\"0.2\" />\n              </list>\n            </option>\n          </splitter-proportions>\n        </settings>\n      </state>\n    </states>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 2eb01472d82834bef9c43981e58039332c1b37c0)
+++ b/.idea/misc.xml	(date 1681040527247)
@@ -102,7 +102,7 @@
       </profile-state>
     </entry>
   </component>
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" default="true" project-jdk-name="1.8" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_11" default="true" project-jdk-name="11" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/build/classes" />
   </component>
   <component name="ProjectType">
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>apply plugin: 'com.android.application'\napply plugin: 'kotlin-android'\napply plugin: 'kotlin-android-extensions'\napply plugin: 'kotlin-kapt'\nandroid {\n    compileSdkVersion 31\n\n\n    compileOptions {\n        sourceCompatibility JavaVersion.VERSION_1_8\n        targetCompatibility JavaVersion.VERSION_1_8\n        kotlinOptions.jvmTarget = 1.8\n\n    }\n\n    defaultConfig {\n        applicationId \"company.tap.tapuisample\"\n        minSdkVersion 21\n        targetSdkVersion 29\n        versionCode 1\n        versionName \"1.0\"\n\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\n    }\n\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\n        }\n    }\n    kotlinOptions {\n        jvmTarget = '1.8'\n    }\n//    dataBinding {\n//        enabled = false\n//    }\n}\n\n\ndependencies {\n//    kapt 'com.android.databinding:compiler:3.0.0'\n\n//    implementation fileTree(dir: 'libs', include: ['*.jar'])\n    implementation fileTree(include: ['*.jar'], dir: 'libs')\n    implementation 'androidx.cardview:cardview:1.0.0'\n    implementation 'androidx.navigation:navigation-fragment:2.3.1'\n    implementation 'androidx.navigation:navigation-ui:2.3.1'\n    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'\n    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.1'\n    implementation 'androidx.navigation:navigation-ui-ktx:2.3.1'\n\n    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {\n        exclude group: 'com.android.support', module: 'support-annotations'\n    })\n    implementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version\"\n    implementation project(':tapuilibrary')\n    implementation 'androidx.appcompat:appcompat:1.2.0'\n    implementation 'androidx.core:core-ktx:1.3.2'\n    implementation 'androidx.constraintlayout:constraintlayout:2.0.2'\n    implementation 'androidx.legacy:legacy-support-v4:1.0.0'\n    implementation project(':tapuilibrary')\n    testImplementation 'junit:junit:4.13.2'\n    androidTestImplementation 'androidx.test.ext:junit:1.1.5'\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'\n//    annotationProcessor 'com.android.databinding:compiler:3.1.4'\n    implementation 'com.google.android.material:material:1.2.1'\n    implementation \"androidx.viewpager2:viewpager2:1.0.0\"\n    implementation 'com.google.firebase:firebase-analytics:17.6.0'\n    implementation 'com.github.bumptech.glide:glide:4.11.0'\n    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'\n    implementation 'com.squareup.picasso:picasso:2.5.2'\n    implementation 'com.github.Tap-Payments:TapCardInputKit-Android:0.1.0.36.198'\n    api 'com.github.Tap-Payments:TapCardInputKit-Android:0.1.0.36.198'\n    implementation 'com.github.Tap-Payments:TapNFCCardReaderKit-Android:0.0.1'\n    implementation \"io.reactivex.rxjava2:rxjava:2.2.19\"\n    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'\n    implementation 'com.github.Tap-Payments:TapCardScannerKit-Android:0.0.1.5'\n    implementation 'company.tap:PayCards-Tap-Android:0.1.6.4'\n    implementation 'io.alterac.blurkit:blurkit:1.1.0'\n    implementation 'androidx.biometric:biometric:1.1.0'\n    implementation \"androidx.constraintlayout:constraintlayout:2.0.2\"\n    implementation 'jp.wasabeef:blurry:4.0.0'\n    implementation \"com.hbb20:ccp:2.4.1\"\n    implementation 'jp.wasabeef:recyclerview-animators:4.0.1'\n    api 'com.github.Tap-Payments:LocalisationManager-Android:0.0.1.30'\n    implementation 'com.tomergoldst.android:tooltips:1.0.10'\n\n //   implementation 'com.github.Tap-Payments:TapUIKit-Android:1.1.1.306'\n  //  api 'com.github.Tap-Payments:TapUIKit-Android:1.1.1.306'\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle b/app/build.gradle
--- a/app/build.gradle	(revision 2eb01472d82834bef9c43981e58039332c1b37c0)
+++ b/app/build.gradle	(date 1681042636519)
@@ -1,3 +1,4 @@
+
 apply plugin: 'com.android.application'
 apply plugin: 'kotlin-android'
 apply plugin: 'kotlin-android-extensions'
Index: tapuilibrary/src/main/res/values/styles.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n    <style name=\"TextStyle\">\n        <item name=\"android:textSize\">12sp</item>\n        <item name=\"android:fontFamily\">sans-serif</item>\n        <item name=\"android:textStyle\">normal</item>\n        <item name=\"android:textColor\">@color/brown_grey_0</item>\n    </style>\n    <style name=\"CustomCardViewStyle\" parent=\"@style/Widget.MaterialComponents.CardView\">\n        <item name=\"shapeAppearanceOverlay\">@style/ShapeAppearanceOverlay.MaterialCardView.Cut</item>\n    </style>\n\n    <style name=\"ShapeAppearanceOverlay.MaterialCardView.Cut\" parent=\"\">\n        <item name=\"cornerFamily\">rounded</item>\n        <item name=\"cornerSizeTopRight\">0dp</item>\n        <item name=\"cornerSizeTopLeft\">0dp</item>\n        <item name=\"cornerSizeBottomRight\">0dp</item>\n        <item name=\"cornerSizeBottomLeft\">0dp</item>\n    </style>\n    <style name=\"SwitchPrimary\" >\n        <item name=\"colorControlActivated\">@color/switchOnColor</item>\n       <!-- <item name=\"colorControlDeactivated\">@color/switchOffColor\n        </item>-->\n    </style>\n    <style name=\"SwitchSecondary\" >\n        <item name=\"colorControlActivated\">#009aff</item>\n    </style>\n    <style name=\"OtpWidget\" />\n\n    <style name=\"OtpWidget.CustomOtpView\" parent=\"Widget.AppCompat.EditText\">\n        <item name=\"android:background\">@null</item>\n        <item name=\"android:minHeight\">0dp</item>\n        <item name=\"android:maxLines\">1</item>\n    </style>\n\n    <!-- Base application theme. -->\n    <style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.DarkActionBar\">\n        <!-- Customize your theme here. -->\n        <item name=\"colorPrimary\">#ccffffff</item>\n        <item name=\"colorPrimaryDark\">#ffffff</item>\n        <item name=\"colorAccent\">#ffffff</item>\n    </style>\n    <!-- Base application theme. -->\n    <style name=\"AppThemeBlack\" parent=\"Theme.AppCompat.Light.NoActionBar\">\n        <!-- Customize your theme here. -->\n        <item name=\"colorPrimary\">#000000</item>\n        <item name=\"colorPrimaryDark\">#000000</item>\n        <item name=\"colorAccent\">#000000</item>\n    </style>\n    <style name=\"AppTheme.TextFloatLabelAppearance\" parent=\"TextAppearance.Design.Hint\">\n        <!-- Floating label appearance here -->\n        <item name=\"android:textColor\">@color/blue</item>\n        <item name=\"android:colorFocusedHighlight\">@color/blue</item>\n        <item name=\"android:color\">@color/blue</item>\n        <item name=\"tickColorActive\">@color/blue</item>\n        <item name=\"android:focusedByDefault\">true</item>\n        <item name=\"boxStrokeColor\">@color/blue</item>\n    </style>\n\n    <style name=\"MyStyle\">\n        <item name=\"colorAccent\">@color/blue</item>\n        <item name=\"android:lineHeight\">1dp</item>\n        <item name=\"lineHeight\">1dp</item>\n    </style>\n    <style name=\"label_one\">\n        <item name=\"android:textSize\">12sp</item>\n        <item name=\"android:letterSpacing\">-0.03</item>\n        <item name=\"android:textColor\">#4B4847</item>\n    </style>\n\n</resources>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tapuilibrary/src/main/res/values/styles.xml b/tapuilibrary/src/main/res/values/styles.xml
--- a/tapuilibrary/src/main/res/values/styles.xml	(revision 2eb01472d82834bef9c43981e58039332c1b37c0)
+++ b/tapuilibrary/src/main/res/values/styles.xml	(date 1681044748452)
@@ -57,6 +57,14 @@
         <item name="boxStrokeColor">@color/blue</item>
     </style>
 
+
+    <style name="CustomBottomSheetDialogTheme" parent="Theme.Design.Light.BottomSheetDialog">
+        <item name="bottomSheetStyle">@style/CustomBottomSheetStyle</item>
+    </style>
+
+    <style name="CustomBottomSheetStyle" parent="Widget.Design.BottomSheet.Modal">
+        <item name="android:background">@android:color/transparent</item>
+    </style>
     <style name="MyStyle">
         <item name="colorAccent">@color/blue</item>
         <item name="android:lineHeight">1dp</item>
